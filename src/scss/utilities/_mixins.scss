@function check-type-scale-value($scale) {

    // Check $scale against the values in $type-scales.
    @if map-has-key($type-scales, $scale) {

      // If the value of $scale is defined in
      // $type-scales, return the value of $scale.
      @return map-get($type-scales, $scale);

      // If the value of $scale is not defined in the
      // $type-scales map, check if the value is a number
      // and that the number is a unitless value.
    }

    @else if type-of($scale)==number and unitless($scale) {

      // If the value of $scale is a unitless number,
      // return the number.
      @return $scale;

      // Lastly, should the value passed to $scale be neither
      // found in the $type-scales map nor a unitless number,
      // throw a Sass error to explain the issue.
    }

    @else {

      // Throw a Sass error if the $scale value is
      // neither found in the $type-scales map nor
      // a unitless number.
      @error "Sorry, `#{$scale}` is not a unitless number value or a pre-defined key in the $type-scales map.";
    }

  }


  @mixin create-heading-type-scale($scale) {

    // Check the $scale value and store in a variable to be
    // used when calculating the font sizes.
    $the-heading-type-scale: check-type-scale-value($scale);

    // Starting from h6, multiply each previous value by the scale
    // to get the next font size
    $font-size-h6: $font-size-base;
    $font-size-h5: $font-size-h6 * $the-heading-type-scale;
    $font-size-h4: $font-size-h5 * $the-heading-type-scale;
    $font-size-h3: $font-size-h4 * $the-heading-type-scale;
    $font-size-h2: $font-size-h3 * $the-heading-type-scale;
    $font-size-h1: $font-size-h2 * $the-heading-type-scale;
    // $font-size-display-base is made global to allow for accessing the
    // varibale in the next mixin.
    $font-size-display-base: $font-size-h1 !global;

    // Add the created font sizes to the elements and classes
    h1,
    .h1 {
      font-size: $font-size-h1;
    }

    h2,
    .h2 {
      font-size: $font-size-h2;
    }

    h3,
    .h3 {
      font-size: $font-size-h3;
    }

    h4,
    .h4 {
      font-size: $font-size-h4;
    }

    h5,
    .h5 {
      font-size: $font-size-h5;
    }

    h6,
    .h6 {
      font-size: $font-size-h6;
    }
  }

  @mixin create-display-type-scale($scale) {

    // Store default type scale in a variable for calculations
    $the-display-type-scale: check-type-scale-value($scale);

    // Create variables to reference the previous font size
    $font-size-display-4: $font-size-display-base + $font-size-base;
    $font-size-display-3: $font-size-display-4 * $the-display-type-scale;
    $font-size-display-2: $font-size-display-3 * $the-display-type-scale;
    $font-size-display-1: $font-size-display-2 * $the-display-type-scale;

    // Add the created font sizes to the elements and classes
    .display-4 {
      font-size: $font-size-display-4;
    }

    .display-3 {
      font-size: $font-size-display-3;
    }

    .display-2 {
      font-size: $font-size-display-2;
    }

    .display-1 {
      font-size: $font-size-display-1;
    }
  }


  @mixin stick-edges(){
    position: absolute;
    top:0;
    left: 0;
    right: 0;
    bottom: 0;
  }